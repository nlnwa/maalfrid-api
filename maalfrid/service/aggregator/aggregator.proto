syntax = "proto3";

package maalfrid.service.aggregator;

option go_package = "aggregator";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Aggregator {
    // Detect language of extracted texts
    rpc RunLanguageDetection (RunLanguageDetectionRequest) returns (google.protobuf.Empty) {
    }

    // Aggregate data from veidemann to maalfrid
    rpc RunAggregation (RunAggregationRequest) returns (google.protobuf.Empty) {
    }

    // Synchronize entities from veidemann to maalfrid
    rpc SyncEntities (SyncEntitiesRequest) returns (google.protobuf.Empty) {
    }
}

message Label {
    string key = 1;
    string value = 2;
}

message SyncEntitiesRequest {
    // if set then only entities with a matching name will be synchronized
    string name = 1;
    // if set then only entities labeled with any of the labels will be synchronized
    repeated Label labels = 2;
}

message RunAggregationRequest {
    // The lower bound of the start time an execution this aggregation should process (inclusive)
    google.protobuf.Timestamp start_time = 1;
    // The upper bound of the start time an execution this aggregation should process (exlusive)
    google.protobuf.Timestamp end_time = 2;
}

message RunLanguageDetectionRequest {
    // If language detection should process extracted texts already processed
    bool detect_all = 1;
}
