syntax = "proto3";

package maalfrid.service.aggregator;

option go_package = "aggregator";

import "google/protobuf/empty.proto";

service Aggregator {
    // Detect language of extracted texts
    rpc RunLanguageDetection (RunLanguageDetectionRequest) returns (google.protobuf.Empty) {
    }

    // Aggregate data from veidemann to maalfrid
    rpc RunAggregation (RunAggregationRequest) returns (google.protobuf.Empty) {
    }

    // Synchronize entities from veidemann to maalfrid
    rpc SyncEntities (SyncEntitiesRequest) returns (google.protobuf.Empty) {
    }

    rpc FilterAggregate (FilterAggregateRequest) returns (google.protobuf.Empty){
    }
}

message Label {
    string key = 1;
    string value = 2;
}

message SyncEntitiesRequest {
    // if set then only entities with a matching name will be synchronized
    string name = 1;
    // if set then only entities labeled with any of the labels will be synchronized
    repeated Label labels = 2;
}

message RunAggregationRequest {
    string job_execution_id = 1;
}

message FilterAggregateRequest {
    string job_execution_id = 1;
    string seed_id = 2;
}

message RunLanguageDetectionRequest {
    // If language detection should process extracted texts already processed
    bool detect_all = 1;
}
