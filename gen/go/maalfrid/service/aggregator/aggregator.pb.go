// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maalfrid/service/aggregator/aggregator.proto

package aggregator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Label struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_aggregator_1e22c710a0accac1, []int{0}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Label.Unmarshal(m, b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Label.Marshal(b, m, deterministic)
}
func (dst *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(dst, src)
}
func (m *Label) XXX_Size() int {
	return xxx_messageInfo_Label.Size(m)
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SyncEntitiesRequest struct {
	// if set then only entities with a matching name will be synchronized
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// if set then only entities labeled with any of the labels will be synchronized
	Labels               []*Label `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncEntitiesRequest) Reset()         { *m = SyncEntitiesRequest{} }
func (m *SyncEntitiesRequest) String() string { return proto.CompactTextString(m) }
func (*SyncEntitiesRequest) ProtoMessage()    {}
func (*SyncEntitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aggregator_1e22c710a0accac1, []int{1}
}
func (m *SyncEntitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncEntitiesRequest.Unmarshal(m, b)
}
func (m *SyncEntitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncEntitiesRequest.Marshal(b, m, deterministic)
}
func (dst *SyncEntitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncEntitiesRequest.Merge(dst, src)
}
func (m *SyncEntitiesRequest) XXX_Size() int {
	return xxx_messageInfo_SyncEntitiesRequest.Size(m)
}
func (m *SyncEntitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncEntitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncEntitiesRequest proto.InternalMessageInfo

func (m *SyncEntitiesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SyncEntitiesRequest) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RunAggregationRequest struct {
	// The lower bound of the start time an execution this aggregation should process (inclusive)
	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The upper bound of the start time an execution this aggregation should process (exlusive)
	EndTime              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RunAggregationRequest) Reset()         { *m = RunAggregationRequest{} }
func (m *RunAggregationRequest) String() string { return proto.CompactTextString(m) }
func (*RunAggregationRequest) ProtoMessage()    {}
func (*RunAggregationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aggregator_1e22c710a0accac1, []int{2}
}
func (m *RunAggregationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunAggregationRequest.Unmarshal(m, b)
}
func (m *RunAggregationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunAggregationRequest.Marshal(b, m, deterministic)
}
func (dst *RunAggregationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAggregationRequest.Merge(dst, src)
}
func (m *RunAggregationRequest) XXX_Size() int {
	return xxx_messageInfo_RunAggregationRequest.Size(m)
}
func (m *RunAggregationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAggregationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunAggregationRequest proto.InternalMessageInfo

func (m *RunAggregationRequest) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RunAggregationRequest) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterType((*Label)(nil), "maalfrid.service.aggregator.Label")
	proto.RegisterType((*SyncEntitiesRequest)(nil), "maalfrid.service.aggregator.SyncEntitiesRequest")
	proto.RegisterType((*RunAggregationRequest)(nil), "maalfrid.service.aggregator.RunAggregationRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aggregator service

type AggregatorClient interface {
	// Detect language of extracted texts
	RunLanguageDetection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Aggregate data from veidemann to maalfrid
	RunAggregation(ctx context.Context, in *RunAggregationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Synchronize entities from veidemann to maalfrid
	SyncEntities(ctx context.Context, in *SyncEntitiesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) RunLanguageDetection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/RunLanguageDetection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) RunAggregation(ctx context.Context, in *RunAggregationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/RunAggregation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SyncEntities(ctx context.Context, in *SyncEntitiesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/SyncEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aggregator service

type AggregatorServer interface {
	// Detect language of extracted texts
	RunLanguageDetection(context.Context, *empty.Empty) (*empty.Empty, error)
	// Aggregate data from veidemann to maalfrid
	RunAggregation(context.Context, *RunAggregationRequest) (*empty.Empty, error)
	// Synchronize entities from veidemann to maalfrid
	SyncEntities(context.Context, *SyncEntitiesRequest) (*empty.Empty, error)
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_RunLanguageDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RunLanguageDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/RunLanguageDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RunLanguageDetection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_RunAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RunAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/RunAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RunAggregation(ctx, req.(*RunAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SyncEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SyncEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/SyncEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SyncEntities(ctx, req.(*SyncEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maalfrid.service.aggregator.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunLanguageDetection",
			Handler:    _Aggregator_RunLanguageDetection_Handler,
		},
		{
			MethodName: "RunAggregation",
			Handler:    _Aggregator_RunAggregation_Handler,
		},
		{
			MethodName: "SyncEntities",
			Handler:    _Aggregator_SyncEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maalfrid/service/aggregator/aggregator.proto",
}

func init() {
	proto.RegisterFile("maalfrid/service/aggregator/aggregator.proto", fileDescriptor_aggregator_1e22c710a0accac1)
}

var fileDescriptor_aggregator_1e22c710a0accac1 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xfd, 0x51, 0x7e, 0xa0, 0x0c, 0xc4, 0x98, 0x15, 0x0d, 0x29, 0x07, 0x49, 0x4f, 0x1c, 0xcc,
	0xd6, 0xd4, 0x78, 0xd0, 0x1b, 0x46, 0x12, 0x0f, 0x9c, 0xaa, 0x27, 0x0e, 0x9a, 0x05, 0x86, 0x4d,
	0x63, 0xbb, 0xc5, 0x76, 0x97, 0xa4, 0x1f, 0xc1, 0xab, 0x9f, 0xd8, 0xec, 0xb6, 0x15, 0x54, 0xa8,
	0xb7, 0xf9, 0xf3, 0xde, 0x9b, 0x79, 0x33, 0x70, 0x11, 0x31, 0x16, 0x2e, 0x93, 0x60, 0xe1, 0xa6,
	0x98, 0xac, 0x83, 0x39, 0xba, 0x8c, 0xf3, 0x04, 0x39, 0x93, 0x71, 0xb2, 0x15, 0xd2, 0x55, 0x12,
	0xcb, 0x98, 0xf4, 0x4b, 0x34, 0x2d, 0xd0, 0x74, 0x03, 0xb1, 0xfb, 0x3c, 0x8e, 0x79, 0x88, 0xae,
	0x81, 0xce, 0xd4, 0xd2, 0xc5, 0x68, 0x25, 0xb3, 0x9c, 0x69, 0x9f, 0xff, 0x6c, 0xca, 0x20, 0xc2,
	0x54, 0xb2, 0x68, 0x95, 0x03, 0x1c, 0x17, 0x1a, 0x13, 0x36, 0xc3, 0x90, 0x1c, 0x43, 0xfd, 0x15,
	0xb3, 0x5e, 0x6d, 0x50, 0x1b, 0xb6, 0x7c, 0x1d, 0x92, 0x2e, 0x34, 0xd6, 0x2c, 0x54, 0xd8, 0xb3,
	0x4c, 0x2d, 0x4f, 0x1c, 0x84, 0x93, 0xc7, 0x4c, 0xcc, 0xc7, 0x42, 0x06, 0x32, 0xc0, 0xd4, 0xc7,
	0x37, 0x85, 0xa9, 0x24, 0x04, 0xfe, 0x0b, 0x16, 0x61, 0xc1, 0x37, 0x31, 0xb9, 0x85, 0x66, 0xa8,
	0xb5, 0xd3, 0x9e, 0x35, 0xa8, 0x0f, 0xdb, 0x9e, 0x43, 0x2b, 0x7c, 0x50, 0xb3, 0x86, 0x5f, 0x30,
	0x9c, 0xf7, 0x1a, 0x9c, 0xfa, 0x4a, 0x8c, 0x8a, 0x7e, 0x10, 0x8b, 0x72, 0xd2, 0x0d, 0x40, 0x2a,
	0x59, 0x22, 0x5f, 0xb4, 0x15, 0x33, 0xaf, 0xed, 0xd9, 0x34, 0xf7, 0x49, 0x4b, 0x9f, 0xf4, 0xa9,
	0xf4, 0xe9, 0xb7, 0x0c, 0x5a, 0xe7, 0xe4, 0x1a, 0x0e, 0x51, 0x2c, 0x72, 0xa2, 0xf5, 0x27, 0xf1,
	0x00, 0xc5, 0x42, 0x67, 0xde, 0x87, 0x05, 0x30, 0xfa, 0x5a, 0x94, 0x3c, 0x40, 0xd7, 0x57, 0x62,
	0xc2, 0x04, 0x57, 0x8c, 0xe3, 0x3d, 0x4a, 0x9c, 0xeb, 0xfd, 0xc8, 0xd9, 0x2f, 0xad, 0xb1, 0xfe,
	0x84, 0xbd, 0xa7, 0xee, 0xfc, 0x23, 0xcf, 0x70, 0xf4, 0xdd, 0x23, 0xf1, 0x2a, 0x4f, 0xb4, 0xf3,
	0x20, 0x15, 0xfa, 0x53, 0xe8, 0x6c, 0xff, 0x8a, 0x5c, 0x56, 0xaa, 0xef, 0x78, 0xeb, 0x7e, 0xed,
	0xbb, 0xce, 0x14, 0x36, 0xdc, 0x59, 0xd3, 0xf4, 0xaf, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xed,
	0x54, 0x36, 0x3d, 0xd8, 0x02, 0x00, 0x00,
}
