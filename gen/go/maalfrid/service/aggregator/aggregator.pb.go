// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maalfrid/service/aggregator/aggregator.proto

package aggregator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RunLanguageDetectionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunLanguageDetectionRequest) Reset()         { *m = RunLanguageDetectionRequest{} }
func (m *RunLanguageDetectionRequest) String() string { return proto.CompactTextString(m) }
func (*RunLanguageDetectionRequest) ProtoMessage()    {}
func (*RunLanguageDetectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aggregator_793a60feab5fbf10, []int{0}
}
func (m *RunLanguageDetectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunLanguageDetectionRequest.Unmarshal(m, b)
}
func (m *RunLanguageDetectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunLanguageDetectionRequest.Marshal(b, m, deterministic)
}
func (dst *RunLanguageDetectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunLanguageDetectionRequest.Merge(dst, src)
}
func (m *RunLanguageDetectionRequest) XXX_Size() int {
	return xxx_messageInfo_RunLanguageDetectionRequest.Size(m)
}
func (m *RunLanguageDetectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunLanguageDetectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunLanguageDetectionRequest proto.InternalMessageInfo

type RunLanguageDetectionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunLanguageDetectionResponse) Reset()         { *m = RunLanguageDetectionResponse{} }
func (m *RunLanguageDetectionResponse) String() string { return proto.CompactTextString(m) }
func (*RunLanguageDetectionResponse) ProtoMessage()    {}
func (*RunLanguageDetectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aggregator_793a60feab5fbf10, []int{1}
}
func (m *RunLanguageDetectionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunLanguageDetectionResponse.Unmarshal(m, b)
}
func (m *RunLanguageDetectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunLanguageDetectionResponse.Marshal(b, m, deterministic)
}
func (dst *RunLanguageDetectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunLanguageDetectionResponse.Merge(dst, src)
}
func (m *RunLanguageDetectionResponse) XXX_Size() int {
	return xxx_messageInfo_RunLanguageDetectionResponse.Size(m)
}
func (m *RunLanguageDetectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunLanguageDetectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunLanguageDetectionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RunLanguageDetectionRequest)(nil), "maalfrid.service.aggregator.RunLanguageDetectionRequest")
	proto.RegisterType((*RunLanguageDetectionResponse)(nil), "maalfrid.service.aggregator.RunLanguageDetectionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aggregator service

type AggregatorClient interface {
	RunLanguageDetection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	RunAggregation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncEntities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncSeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) RunLanguageDetection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/RunLanguageDetection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) RunAggregation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/RunAggregation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SyncEntities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/SyncEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SyncSeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/maalfrid.service.aggregator.Aggregator/SyncSeeds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aggregator service

type AggregatorServer interface {
	RunLanguageDetection(context.Context, *empty.Empty) (*empty.Empty, error)
	RunAggregation(context.Context, *empty.Empty) (*empty.Empty, error)
	SyncEntities(context.Context, *empty.Empty) (*empty.Empty, error)
	SyncSeeds(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_RunLanguageDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RunLanguageDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/RunLanguageDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RunLanguageDetection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_RunAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RunAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/RunAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RunAggregation(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SyncEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SyncEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/SyncEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SyncEntities(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SyncSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SyncSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.service.aggregator.Aggregator/SyncSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SyncSeeds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maalfrid.service.aggregator.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunLanguageDetection",
			Handler:    _Aggregator_RunLanguageDetection_Handler,
		},
		{
			MethodName: "RunAggregation",
			Handler:    _Aggregator_RunAggregation_Handler,
		},
		{
			MethodName: "SyncEntities",
			Handler:    _Aggregator_SyncEntities_Handler,
		},
		{
			MethodName: "SyncSeeds",
			Handler:    _Aggregator_SyncSeeds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maalfrid/service/aggregator/aggregator.proto",
}

func init() {
	proto.RegisterFile("maalfrid/service/aggregator/aggregator.proto", fileDescriptor_aggregator_793a60feab5fbf10)
}

var fileDescriptor_aggregator_793a60feab5fbf10 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x41, 0x4b, 0x80, 0x30,
	0x18, 0x86, 0xa3, 0x43, 0xd0, 0x87, 0x74, 0x18, 0xd1, 0x41, 0xab, 0x83, 0xe7, 0xd8, 0xa0, 0xce,
	0x41, 0x49, 0x42, 0x87, 0x4e, 0x7a, 0xeb, 0x36, 0xf5, 0x73, 0x0c, 0x74, 0xb3, 0xed, 0x5b, 0xe0,
	0x6f, 0xe9, 0xcf, 0x86, 0x9a, 0xd9, 0xc1, 0x2e, 0xde, 0xc6, 0xde, 0xe7, 0x7d, 0xf6, 0xc2, 0xe0,
	0xae, 0x97, 0xb2, 0x6b, 0x9d, 0x6e, 0x84, 0x47, 0xf7, 0xa9, 0x6b, 0x14, 0x52, 0x29, 0x87, 0x4a,
	0x92, 0x75, 0x7f, 0x8e, 0x7c, 0x70, 0x96, 0x2c, 0x4b, 0x56, 0x9a, 0xff, 0xd0, 0x7c, 0x43, 0xe2,
	0x44, 0x59, 0xab, 0x3a, 0x14, 0x33, 0x5a, 0x85, 0x56, 0x60, 0x3f, 0xd0, 0xb8, 0x34, 0xd3, 0x1b,
	0x48, 0x8a, 0x60, 0xde, 0xa4, 0x51, 0x41, 0x2a, 0x7c, 0x41, 0xc2, 0x9a, 0xb4, 0x35, 0x05, 0x7e,
	0x04, 0xf4, 0x94, 0xde, 0xc2, 0xf5, 0x7e, 0xec, 0x07, 0x6b, 0x3c, 0xde, 0x7f, 0x9d, 0x02, 0x3c,
	0xff, 0x3e, 0xc5, 0x5e, 0xe1, 0x72, 0x0f, 0x67, 0x57, 0x7c, 0xd9, 0xc0, 0xd7, 0x0d, 0x3c, 0x9f,
	0x36, 0xc4, 0xff, 0xdc, 0xa7, 0x27, 0x2c, 0x83, 0x8b, 0x22, 0x98, 0x55, 0x7d, 0xcc, 0xf1, 0x04,
	0x51, 0x39, 0x9a, 0x3a, 0x37, 0xa4, 0x49, 0xa3, 0x3f, 0x60, 0x78, 0x84, 0xf3, 0xc9, 0x50, 0x22,
	0x36, 0x07, 0xea, 0x59, 0xf4, 0x0e, 0xdb, 0x3f, 0x54, 0x67, 0x73, 0xfe, 0xf0, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x63, 0x37, 0x30, 0xb3, 0xdb, 0x01, 0x00, 0x00,
}
